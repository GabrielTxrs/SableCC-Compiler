Package prolixa;

Helpers 
  maiuscula = ['A' .. 'Z'];
  minuscula = ['a' .. 'z'];
  letra = maiuscula | minuscula;
  digito = ['0' .. '9'];
  espaco = ' ';

  tab = 9;
  cr = 13;
  lf = 10;
  all = [0 .. 0xFFFF];
  eol = cr lf | cr | lf;
  not_cr_lf = [all - [cr + lf]];
  not_l_bracket = [all - '{'];
  not_r_bracket = [all - '}'];
  quotes = ''';
  double_quotes = '"';
  backslash = '\';
  not_quotes_backslash = [not_cr_lf - [quotes + backslash]];
   
  /* valores booleanos */
  bool_yes = 'yes';
  bool_no  = 'no';

 
Tokens
  /* frases de cabeçalho */
  this = 'This';
  is = 'is';
  program = 'program';
 
  it = 'It';
  presents = 'presents';
  
  let = 'Let';
  us = 'us';
  begin = 'begin';
 
  that = 'That';
  would = 'would';
  be = 'be';
  all = 'all';

  /* Operadores e símbolos */
  plus      = '+';
  minus     = '-';
  mult      = '*';
  div       = '/';
  mod       = '//';
  assign    = ':=';
  equal     = '=';
  eq        = '==';
  neq       = '!=';
  le        = '<=';
  ge        = '>=';
  lt        = '<';
  gt        = '>';
  lpar      = '(';
  rpar      = ')';
  lbracket  = '[';
  rbracket  = ']';
  comma     = ',';
  colon     = ':';
  semicolon = ';';
  dot       = '.';
  times     = 'x';
  not = '!';
  
  /* if */
  just = 'just';
  in = 'in';
  case = 'case';
  that_lower = 'that';

  otherwise = 'otherwise';
  do = 'do';

  /* while */
  as = 'as';
  long = 'long';

  /* continue */
  go = 'go';
  next = 'next';
  iteration = 'iteration';

  /* tipos primitivos */
  tipo_symbol = 'symbol';
  tipo_number = 'number';
  tipo_answer = 'answer';

  considering  = 'considering';

  from = 'from';
  by = 'by';
  to = 'to';

  abandon = 'abandon';

  /* operadores logicos */
  and = 'and';
  or  = 'or';
  xor = 'xor';

  answer = bool_yes | bool_no;
  symbol = quotes (backslash letra)? | letra quotes;

  string = double_quotes [not_cr_lf - double_quotes]+ double_quotes;
  numero = digito+ ('.' | digito+)?;
  identificador = maiuscula ( digito | maiuscula | minuscula |  '_' )*;
  capture = 'capture';
  show = 'show';

  /* modificadores e declaracao de vetor */
  alterable = 'alterable';
  unalterable = 'unalterable';
  vector = 'vector';
  of = 'of';
  
  vazio = (espaco | cr | lf | tab)+;
  comentario_bloco = '{'not_r_bracket*'}';

Ignored Tokens
  vazio,
  comentario_bloco;