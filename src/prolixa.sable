Package prolixa;

Helpers 
  maiuscula = ['A' .. 'Z'];
  minuscula = ['a' .. 'z'];
  letra = maiuscula | minuscula;
  digito = ['0' .. '9'];

  tab = 9;
  cr = 13;
  lf = 10;
  all = [0 .. 0xFFFF];
  eol = cr lf | cr | lf;
  not_cr_lf = [all - [cr + lf]];
  not_l_bracket = [all - '{'];
  not_r_bracket = [all - '}'];

  espaco = ' ';
  quotes = ''';
  double_quotes = '"';
  backslash = '\';
  
  controle = 'a' | 'b' | 't' | 'n' | 'v' | 'f' | '0';
  simbolos = [33 .. 47] | [58 .. 64] | [91 .. 96] | [123 .. 126];
   
  bool_yes = 'yes';
  bool_no  = 'no';

 
Tokens
  /* Frases de Cabecalho */
  this = 'This';
  is = 'is';
  program = 'program';
  it = 'It';
  presents = 'presents';
  let = 'Let';
  us = 'us';
  begin = 'begin';
  that = 'That';
  would = 'would';
  be = 'be';
  all = 'all';


  /* Operadores e Simbolos */
  plus      = '+';
  minus     = '-';
  mult      = '*';
  div       = '/';
  mod       = '//';
  assign    = ':=';
  equal     = '=';
  lpar      = '(';
  rpar      = ')';
  lbracket  = '[';
  rbracket  = ']';
  comma     = ',';
  colon     = ':';
  semicolon = ';';
  dot       = '.';
  times     = 'x';
  

  /* Operadores Logicos*/
  eq        = '==';
  neq       = '!=';
  le        = '<=';
  ge        = '>=';
  lt        = '<';
  gt        = '>';
  not = '!';


  /* Condicional */
  just = 'just';
  in = 'in';
  case = 'case';
  that_lower = 'that';
  otherwise = 'otherwise';
  do = 'do';


  /* Looping e Estruturas de Controle*/
  as = 'as';
  long = 'long';
  go = 'go';
  next = 'next';
  iteration = 'iteration';
  considering  = 'considering';
  from = 'from';
  by = 'by';
  to = 'to';
  abandon = 'abandon';


  /* Tipos Primitivos */
  tipo_symbol = 'symbol';
  tipo_number = 'number';
  tipo_answer = 'answer';
  symbol = quotes (backslash controle | simbolos | letra | digito | espaco) quotes;
  string = double_quotes ([[0 .. 0xffff] - ['"' + '\']] | '\'[0 .. 0xffff])+ double_quotes;
  numero = digito+ ('.' digito+)?;
  answer = bool_yes | bool_no;


  /* Operadores Logicos */
  and = 'and';
  or  = 'or';
  xor = 'xor';


  /* Funcoes IO */
  capture = 'capture';
  show = 'show';


  /* Modificadores e Declaracao de Identificador e Vetor */
  alterable = 'alterable';
  unalterable = 'unalterable';
  identificador = maiuscula ( digito | maiuscula | minuscula |  '_' )*;
  vector = 'vector';
  of = 'of';

  
  /* Comentario */
  comentario = '{'not_r_bracket*'}';


  /* Vazio */
  vazio = (espaco | cr | lf | tab)+;


Ignored Tokens
  vazio,
  comentario;